name: ssh_failed_login_response
description: Detecta accesos SSH fallidos, envía alerta y bloquea IP
trigger:
  type: log_monitoring
  file_path: /var/log/auth.log
  pattern: "Failed password"

actions:
  - name: extract_failed_ips
    type: script
    script: |
      import re, datetime
      from collections import defaultdict

      log_lines = {{ trigger.output }}
      failed_attempts = defaultdict(list)
      now = datetime.datetime.now()

      for line in log_lines:
          if "Failed password" in line:
              match = re.search(r"from (\d{1,3}(?:\.\d{1,3}){3})", line)
              time_match = re.search(r"^(\w+ \d+ \d+:\d+:\d+)", line)
              if match and time_match:
                  ip = match.group(1)
                  time_str = time_match.group(1)
                  log_time = datetime.datetime.strptime(time_str, "%b %d %H:%M:%S")
                  # Suponemos que el año es actual
                  log_time = log_time.replace(year=now.year)
                  if (now - log_time).total_seconds() <= 300:  # 5 minutos
                      failed_attempts[ip].append(log_time)

      suspicious_ips = [ip for ip, times in failed_attempts.items() if len(times) > 5]
      return suspicious_ips

  - name: send_email_alert
    type: email.send
    condition: "{{ actions.extract_failed_ips.result | length > 0 }}"
    to: "soc_team@example.com"
    subject: "⚠️ Alerta: Accesos SSH fallidos"
    body: |
      Se detectaron múltiples intentos fallidos de SSH:
      IPs sospechosas: {{ actions.extract_failed_ips.result }}

  - name: block_ip_firewall
    type: script
    condition: "{{ actions.extract_failed_ips.result | length > 0 }}"
    for_each: "{{ actions.extract_failed_ips.result }}"
    script: |
      ip = "{{ item }}"
      print(f"Bloqueando IP sospechosa: {ip}")
      # Simular bloqueo en firewall
      # En producción sería algo como: os.system(f"iptables -A INPUT -s {ip} -j DROP")
